#lang racket
(define-struct leaf () #:transparent)
(define-struct node (l elem r) #:transparent)
( define t
( node
( node ( leaf ) 2 ( leaf ) )
5
( node ( node ( leaf ) 6 ( leaf ) )
8
( node ( leaf ) 9 ( leaf ) ) ) ) )
;podpunkt1
(define (bst? t)
  (define (isbst max min t)
    (cond [(leaf? t) #t]
          [(or (< (node-elem t) min)
               (> (node-elem t) max))  #f]
          [(and (isbst (node-elem t) min (node-l t))
                (isbst max (node-elem t) (node-r t))) #t]
          [else #f]))
  (isbst +inf.0 -inf.0 t))
(bst? t)
;podpunkt 2
(define (sum-paths t)
  (define (sum-path x t)
    (if (leaf? t) (leaf)
        
    (let* ([left (if (leaf? (node-l t))
         (leaf) (+ (node-elem (node-l t)) x) )]
           
    [right (if (leaf? (node-r t))
       (leaf) (+ (node-elem (node-r t)) x))])
      
    (node (sum-path left (node-l t))
          x
          (sum-path right (node-r t))))))
  
  (sum-path (node-elem t) t))
(sum-paths t)
          