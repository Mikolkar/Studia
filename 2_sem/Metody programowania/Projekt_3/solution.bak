#lang plait
;; only for tests
(module+ test
  (print-only-errors #t))
;;

;; defining types
(define-type Op
  (add) (sub) (mult) (leq))

(define-type Exp
  (numE [n : Number])
  (varE [x : Symbol])
  (opE [op : Op] [e1 : Exp] [e2 : Exp])
  (ifzE [b : Exp] [e1 : Exp] [e2 : Exp])
  (letE [(Listof Symbol)] [e : Exp])
  (fE [x : Symbol] [e : Exp])
  (appE [x : Symbol] [xs : (Listof Exp)])
  (defE [fs : (Listof (Symbol * Exp))] [e : Exp]))

;; parser

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s)
     (numE (s-exp->number s))]
    [(s-exp-match? `{define {SYMBOL} for ANY} s)
     (defE (s-exp->symbol
            (second (s-exp->list 
                    (second (s-exp->list s)))))
           (parse (third (s-exp->list s))))]
    [(s-exp-match? `{SYMBOL ANY ANY} s)
     (opE (parse-op (s-exp->symbol (first (s-exp->list s))))
          (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s))))]
    [(s-exp-match? `{if ANY ANY ANY} s)
     (ifE (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s)))
          (parse (fourth (s-exp->list s))))]
    [(s-exp-match? `SYMBOL s)
     (varE (s-exp->symbol s))]
    [(s-exp-match? `{let SYMBOL ANY ANY} s)
     (letE (s-exp->symbol (second (s-exp->list s)))
           (parse (third (s-exp->list s)))
           (parse (fourth (s-exp->list s))))]
    [(s-exp-match? `{ANY ANY} s)
     (appE (parse (first (s-exp->list s)))
           (parse (second (s-exp->list s))))]
    [else (error 'parse "invalid input")]))
  